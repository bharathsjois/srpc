// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dts {
namespace types {
class DtsMessageHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DtsMessageHeader> {
} _DtsMessageHeader_default_instance_;
class DtsStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DtsString> {
} _DtsString_default_instance_;
class DtsStringListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DtsStringList> {
} _DtsStringList_default_instance_;

namespace protobuf_dts_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsMessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsMessageHeader, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsMessageHeader, mid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsMessageHeader, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsMessageHeader, nature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsString, string_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsStringList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtsStringList, string_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DtsMessageHeader)},
  { 8, -1, sizeof(DtsString)},
  { 13, -1, sizeof(DtsStringList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DtsMessageHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DtsString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DtsStringList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dts.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _DtsMessageHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DtsString_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DtsStringList_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DtsMessageHeader_default_instance_.DefaultConstruct();
  _DtsString_default_instance_.DefaultConstruct();
  _DtsStringList_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tdts.proto\022\tdts.types\"\221\002\n\020DtsMessageHea"
      "der\0225\n\004type\030\001 \001(\0162\'.dts.types.DtsMessage"
      "Header.MessageType\022\013\n\003mid\030\002 \001(\005\022\013\n\003rid\030\003"
      " \001(\005\0229\n\006nature\030\004 \001(\0162).dts.types.DtsMess"
      "ageHeader.MessageNature\">\n\013MessageType\022\013"
      "\n\007UNKNOWN\020\000\022\n\n\006METHOD\020\001\022\n\n\006RESULT\020\002\022\n\n\006S"
      "IGNAL\020\003\"1\n\rMessageNature\022\013\n\007DEFAULT\020\000\022\010\n"
      "\004SYNC\020\001\022\t\n\005ASYNC\020\002\"\033\n\tDtsString\022\016\n\006strin"
      "g\030\001 \001(\t\"\037\n\rDtsStringList\022\016\n\006string\030\001 \003(\t"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dts.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dts_2eproto

const ::google::protobuf::EnumDescriptor* DtsMessageHeader_MessageType_descriptor() {
  protobuf_dts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dts_2eproto::file_level_enum_descriptors[0];
}
bool DtsMessageHeader_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DtsMessageHeader_MessageType DtsMessageHeader::UNKNOWN;
const DtsMessageHeader_MessageType DtsMessageHeader::METHOD;
const DtsMessageHeader_MessageType DtsMessageHeader::RESULT;
const DtsMessageHeader_MessageType DtsMessageHeader::SIGNAL;
const DtsMessageHeader_MessageType DtsMessageHeader::MessageType_MIN;
const DtsMessageHeader_MessageType DtsMessageHeader::MessageType_MAX;
const int DtsMessageHeader::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DtsMessageHeader_MessageNature_descriptor() {
  protobuf_dts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dts_2eproto::file_level_enum_descriptors[1];
}
bool DtsMessageHeader_MessageNature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DtsMessageHeader_MessageNature DtsMessageHeader::DEFAULT;
const DtsMessageHeader_MessageNature DtsMessageHeader::SYNC;
const DtsMessageHeader_MessageNature DtsMessageHeader::ASYNC;
const DtsMessageHeader_MessageNature DtsMessageHeader::MessageNature_MIN;
const DtsMessageHeader_MessageNature DtsMessageHeader::MessageNature_MAX;
const int DtsMessageHeader::MessageNature_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DtsMessageHeader::kTypeFieldNumber;
const int DtsMessageHeader::kMidFieldNumber;
const int DtsMessageHeader::kRidFieldNumber;
const int DtsMessageHeader::kNatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DtsMessageHeader::DtsMessageHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dts.types.DtsMessageHeader)
}
DtsMessageHeader::DtsMessageHeader(const DtsMessageHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&nature_) -
    reinterpret_cast<char*>(&type_) + sizeof(nature_));
  // @@protoc_insertion_point(copy_constructor:dts.types.DtsMessageHeader)
}

void DtsMessageHeader::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&nature_) -
    reinterpret_cast<char*>(&type_) + sizeof(nature_));
  _cached_size_ = 0;
}

DtsMessageHeader::~DtsMessageHeader() {
  // @@protoc_insertion_point(destructor:dts.types.DtsMessageHeader)
  SharedDtor();
}

void DtsMessageHeader::SharedDtor() {
}

void DtsMessageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtsMessageHeader::descriptor() {
  protobuf_dts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dts_2eproto::file_level_metadata[0].descriptor;
}

const DtsMessageHeader& DtsMessageHeader::default_instance() {
  protobuf_dts_2eproto::InitDefaults();
  return *internal_default_instance();
}

DtsMessageHeader* DtsMessageHeader::New(::google::protobuf::Arena* arena) const {
  DtsMessageHeader* n = new DtsMessageHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DtsMessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:dts.types.DtsMessageHeader)
  ::memset(&type_, 0, reinterpret_cast<char*>(&nature_) -
    reinterpret_cast<char*>(&type_) + sizeof(nature_));
}

bool DtsMessageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dts.types.DtsMessageHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dts.types.DtsMessageHeader.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dts::types::DtsMessageHeader_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dts.types.DtsMessageHeader.MessageNature nature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nature(static_cast< ::dts::types::DtsMessageHeader_MessageNature >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dts.types.DtsMessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dts.types.DtsMessageHeader)
  return false;
#undef DO_
}

void DtsMessageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dts.types.DtsMessageHeader)
  // .dts.types.DtsMessageHeader.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 mid = 2;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mid(), output);
  }

  // int32 rid = 3;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rid(), output);
  }

  // .dts.types.DtsMessageHeader.MessageNature nature = 4;
  if (this->nature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->nature(), output);
  }

  // @@protoc_insertion_point(serialize_end:dts.types.DtsMessageHeader)
}

::google::protobuf::uint8* DtsMessageHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dts.types.DtsMessageHeader)
  // .dts.types.DtsMessageHeader.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 mid = 2;
  if (this->mid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mid(), target);
  }

  // int32 rid = 3;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rid(), target);
  }

  // .dts.types.DtsMessageHeader.MessageNature nature = 4;
  if (this->nature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->nature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dts.types.DtsMessageHeader)
  return target;
}

size_t DtsMessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dts.types.DtsMessageHeader)
  size_t total_size = 0;

  // .dts.types.DtsMessageHeader.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 mid = 2;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  // int32 rid = 3;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // .dts.types.DtsMessageHeader.MessageNature nature = 4;
  if (this->nature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtsMessageHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dts.types.DtsMessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const DtsMessageHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DtsMessageHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dts.types.DtsMessageHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dts.types.DtsMessageHeader)
    MergeFrom(*source);
  }
}

void DtsMessageHeader::MergeFrom(const DtsMessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dts.types.DtsMessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.nature() != 0) {
    set_nature(from.nature());
  }
}

void DtsMessageHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dts.types.DtsMessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtsMessageHeader::CopyFrom(const DtsMessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dts.types.DtsMessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtsMessageHeader::IsInitialized() const {
  return true;
}

void DtsMessageHeader::Swap(DtsMessageHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DtsMessageHeader::InternalSwap(DtsMessageHeader* other) {
  std::swap(type_, other->type_);
  std::swap(mid_, other->mid_);
  std::swap(rid_, other->rid_);
  std::swap(nature_, other->nature_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DtsMessageHeader::GetMetadata() const {
  protobuf_dts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dts_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DtsMessageHeader

// .dts.types.DtsMessageHeader.MessageType type = 1;
void DtsMessageHeader::clear_type() {
  type_ = 0;
}
::dts::types::DtsMessageHeader_MessageType DtsMessageHeader::type() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsMessageHeader.type)
  return static_cast< ::dts::types::DtsMessageHeader_MessageType >(type_);
}
void DtsMessageHeader::set_type(::dts::types::DtsMessageHeader_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dts.types.DtsMessageHeader.type)
}

// int32 mid = 2;
void DtsMessageHeader::clear_mid() {
  mid_ = 0;
}
::google::protobuf::int32 DtsMessageHeader::mid() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsMessageHeader.mid)
  return mid_;
}
void DtsMessageHeader::set_mid(::google::protobuf::int32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:dts.types.DtsMessageHeader.mid)
}

// int32 rid = 3;
void DtsMessageHeader::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 DtsMessageHeader::rid() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsMessageHeader.rid)
  return rid_;
}
void DtsMessageHeader::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:dts.types.DtsMessageHeader.rid)
}

// .dts.types.DtsMessageHeader.MessageNature nature = 4;
void DtsMessageHeader::clear_nature() {
  nature_ = 0;
}
::dts::types::DtsMessageHeader_MessageNature DtsMessageHeader::nature() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsMessageHeader.nature)
  return static_cast< ::dts::types::DtsMessageHeader_MessageNature >(nature_);
}
void DtsMessageHeader::set_nature(::dts::types::DtsMessageHeader_MessageNature value) {
  
  nature_ = value;
  // @@protoc_insertion_point(field_set:dts.types.DtsMessageHeader.nature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DtsString::kStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DtsString::DtsString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dts.types.DtsString)
}
DtsString::DtsString(const DtsString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.string().size() > 0) {
    string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_);
  }
  // @@protoc_insertion_point(copy_constructor:dts.types.DtsString)
}

void DtsString::SharedCtor() {
  string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DtsString::~DtsString() {
  // @@protoc_insertion_point(destructor:dts.types.DtsString)
  SharedDtor();
}

void DtsString::SharedDtor() {
  string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DtsString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtsString::descriptor() {
  protobuf_dts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dts_2eproto::file_level_metadata[1].descriptor;
}

const DtsString& DtsString::default_instance() {
  protobuf_dts_2eproto::InitDefaults();
  return *internal_default_instance();
}

DtsString* DtsString::New(::google::protobuf::Arena* arena) const {
  DtsString* n = new DtsString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DtsString::Clear() {
// @@protoc_insertion_point(message_clear_start:dts.types.DtsString)
  string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DtsString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dts.types.DtsString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dts.types.DtsString.string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dts.types.DtsString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dts.types.DtsString)
  return false;
#undef DO_
}

void DtsString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dts.types.DtsString)
  // string string = 1;
  if (this->string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dts.types.DtsString.string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string(), output);
  }

  // @@protoc_insertion_point(serialize_end:dts.types.DtsString)
}

::google::protobuf::uint8* DtsString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dts.types.DtsString)
  // string string = 1;
  if (this->string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dts.types.DtsString.string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dts.types.DtsString)
  return target;
}

size_t DtsString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dts.types.DtsString)
  size_t total_size = 0;

  // string string = 1;
  if (this->string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtsString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dts.types.DtsString)
  GOOGLE_DCHECK_NE(&from, this);
  const DtsString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DtsString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dts.types.DtsString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dts.types.DtsString)
    MergeFrom(*source);
  }
}

void DtsString::MergeFrom(const DtsString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dts.types.DtsString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.string().size() > 0) {

    string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_);
  }
}

void DtsString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dts.types.DtsString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtsString::CopyFrom(const DtsString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dts.types.DtsString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtsString::IsInitialized() const {
  return true;
}

void DtsString::Swap(DtsString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DtsString::InternalSwap(DtsString* other) {
  string_.Swap(&other->string_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DtsString::GetMetadata() const {
  protobuf_dts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dts_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DtsString

// string string = 1;
void DtsString::clear_string() {
  string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DtsString::string() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsString.string)
  return string_.GetNoArena();
}
void DtsString::set_string(const ::std::string& value) {
  
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dts.types.DtsString.string)
}
#if LANG_CXX11
void DtsString::set_string(::std::string&& value) {
  
  string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dts.types.DtsString.string)
}
#endif
void DtsString::set_string(const char* value) {
  
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dts.types.DtsString.string)
}
void DtsString::set_string(const char* value, size_t size) {
  
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dts.types.DtsString.string)
}
::std::string* DtsString::mutable_string() {
  
  // @@protoc_insertion_point(field_mutable:dts.types.DtsString.string)
  return string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DtsString::release_string() {
  // @@protoc_insertion_point(field_release:dts.types.DtsString.string)
  
  return string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DtsString::set_allocated_string(::std::string* string) {
  if (string != NULL) {
    
  } else {
    
  }
  string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  // @@protoc_insertion_point(field_set_allocated:dts.types.DtsString.string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DtsStringList::kStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DtsStringList::DtsStringList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dts.types.DtsStringList)
}
DtsStringList::DtsStringList(const DtsStringList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      string_(from.string_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dts.types.DtsStringList)
}

void DtsStringList::SharedCtor() {
  _cached_size_ = 0;
}

DtsStringList::~DtsStringList() {
  // @@protoc_insertion_point(destructor:dts.types.DtsStringList)
  SharedDtor();
}

void DtsStringList::SharedDtor() {
}

void DtsStringList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtsStringList::descriptor() {
  protobuf_dts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dts_2eproto::file_level_metadata[2].descriptor;
}

const DtsStringList& DtsStringList::default_instance() {
  protobuf_dts_2eproto::InitDefaults();
  return *internal_default_instance();
}

DtsStringList* DtsStringList::New(::google::protobuf::Arena* arena) const {
  DtsStringList* n = new DtsStringList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DtsStringList::Clear() {
// @@protoc_insertion_point(message_clear_start:dts.types.DtsStringList)
  string_.Clear();
}

bool DtsStringList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dts.types.DtsStringList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string(this->string_size() - 1).data(),
            this->string(this->string_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dts.types.DtsStringList.string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dts.types.DtsStringList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dts.types.DtsStringList)
  return false;
#undef DO_
}

void DtsStringList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dts.types.DtsStringList)
  // repeated string string = 1;
  for (int i = 0, n = this->string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string(i).data(), this->string(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dts.types.DtsStringList.string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->string(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dts.types.DtsStringList)
}

::google::protobuf::uint8* DtsStringList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dts.types.DtsStringList)
  // repeated string string = 1;
  for (int i = 0, n = this->string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string(i).data(), this->string(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dts.types.DtsStringList.string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->string(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dts.types.DtsStringList)
  return target;
}

size_t DtsStringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dts.types.DtsStringList)
  size_t total_size = 0;

  // repeated string string = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_size());
  for (int i = 0, n = this->string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtsStringList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dts.types.DtsStringList)
  GOOGLE_DCHECK_NE(&from, this);
  const DtsStringList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DtsStringList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dts.types.DtsStringList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dts.types.DtsStringList)
    MergeFrom(*source);
  }
}

void DtsStringList::MergeFrom(const DtsStringList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dts.types.DtsStringList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_.MergeFrom(from.string_);
}

void DtsStringList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dts.types.DtsStringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtsStringList::CopyFrom(const DtsStringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dts.types.DtsStringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtsStringList::IsInitialized() const {
  return true;
}

void DtsStringList::Swap(DtsStringList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DtsStringList::InternalSwap(DtsStringList* other) {
  string_.UnsafeArenaSwap(&other->string_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DtsStringList::GetMetadata() const {
  protobuf_dts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dts_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DtsStringList

// repeated string string = 1;
int DtsStringList::string_size() const {
  return string_.size();
}
void DtsStringList::clear_string() {
  string_.Clear();
}
const ::std::string& DtsStringList::string(int index) const {
  // @@protoc_insertion_point(field_get:dts.types.DtsStringList.string)
  return string_.Get(index);
}
::std::string* DtsStringList::mutable_string(int index) {
  // @@protoc_insertion_point(field_mutable:dts.types.DtsStringList.string)
  return string_.Mutable(index);
}
void DtsStringList::set_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dts.types.DtsStringList.string)
  string_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DtsStringList::set_string(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dts.types.DtsStringList.string)
  string_.Mutable(index)->assign(std::move(value));
}
#endif
void DtsStringList::set_string(int index, const char* value) {
  string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dts.types.DtsStringList.string)
}
void DtsStringList::set_string(int index, const char* value, size_t size) {
  string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dts.types.DtsStringList.string)
}
::std::string* DtsStringList::add_string() {
  // @@protoc_insertion_point(field_add_mutable:dts.types.DtsStringList.string)
  return string_.Add();
}
void DtsStringList::add_string(const ::std::string& value) {
  string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dts.types.DtsStringList.string)
}
#if LANG_CXX11
void DtsStringList::add_string(::std::string&& value) {
  string_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:dts.types.DtsStringList.string)
}
#endif
void DtsStringList::add_string(const char* value) {
  string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dts.types.DtsStringList.string)
}
void DtsStringList::add_string(const char* value, size_t size) {
  string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dts.types.DtsStringList.string)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DtsStringList::string() const {
  // @@protoc_insertion_point(field_list:dts.types.DtsStringList.string)
  return string_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DtsStringList::mutable_string() {
  // @@protoc_insertion_point(field_mutable_list:dts.types.DtsStringList.string)
  return &string_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace dts

// @@protoc_insertion_point(global_scope)
