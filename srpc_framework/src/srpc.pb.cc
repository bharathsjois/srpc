// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "srpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace srpc {
namespace types {
class SrpcMessageHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SrpcMessageHeader> {
} _SrpcMessageHeader_default_instance_;

namespace protobuf_srpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrpcMessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrpcMessageHeader, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrpcMessageHeader, mid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrpcMessageHeader, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrpcMessageHeader, nature_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SrpcMessageHeader)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SrpcMessageHeader_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "srpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _SrpcMessageHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _SrpcMessageHeader_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nsrpc.proto\022\nsrpc.types\032\036google/protobu"
      "f/wrappers.proto\"\226\002\n\021SrpcMessageHeader\0227"
      "\n\004type\030\001 \001(\0162).srpc.types.SrpcMessageHea"
      "der.MessageType\022\013\n\003mid\030\002 \001(\005\022\013\n\003rid\030\003 \001("
      "\005\022;\n\006nature\030\004 \001(\0162+.srpc.types.SrpcMessa"
      "geHeader.MessageNature\">\n\013MessageType\022\013\n"
      "\007UNKNOWN\020\000\022\n\n\006METHOD\020\001\022\n\n\006RESULT\020\002\022\n\n\006SI"
      "GNAL\020\003\"1\n\rMessageNature\022\013\n\007DEFAULT\020\000\022\010\n\004"
      "SYNC\020\001\022\t\n\005ASYNC\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "srpc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_srpc_2eproto

const ::google::protobuf::EnumDescriptor* SrpcMessageHeader_MessageType_descriptor() {
  protobuf_srpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_srpc_2eproto::file_level_enum_descriptors[0];
}
bool SrpcMessageHeader_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SrpcMessageHeader_MessageType SrpcMessageHeader::UNKNOWN;
const SrpcMessageHeader_MessageType SrpcMessageHeader::METHOD;
const SrpcMessageHeader_MessageType SrpcMessageHeader::RESULT;
const SrpcMessageHeader_MessageType SrpcMessageHeader::SIGNAL;
const SrpcMessageHeader_MessageType SrpcMessageHeader::MessageType_MIN;
const SrpcMessageHeader_MessageType SrpcMessageHeader::MessageType_MAX;
const int SrpcMessageHeader::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SrpcMessageHeader_MessageNature_descriptor() {
  protobuf_srpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_srpc_2eproto::file_level_enum_descriptors[1];
}
bool SrpcMessageHeader_MessageNature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SrpcMessageHeader_MessageNature SrpcMessageHeader::DEFAULT;
const SrpcMessageHeader_MessageNature SrpcMessageHeader::SYNC;
const SrpcMessageHeader_MessageNature SrpcMessageHeader::ASYNC;
const SrpcMessageHeader_MessageNature SrpcMessageHeader::MessageNature_MIN;
const SrpcMessageHeader_MessageNature SrpcMessageHeader::MessageNature_MAX;
const int SrpcMessageHeader::MessageNature_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrpcMessageHeader::kTypeFieldNumber;
const int SrpcMessageHeader::kMidFieldNumber;
const int SrpcMessageHeader::kRidFieldNumber;
const int SrpcMessageHeader::kNatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrpcMessageHeader::SrpcMessageHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_srpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:srpc.types.SrpcMessageHeader)
}
SrpcMessageHeader::SrpcMessageHeader(const SrpcMessageHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&nature_) -
    reinterpret_cast<char*>(&type_) + sizeof(nature_));
  // @@protoc_insertion_point(copy_constructor:srpc.types.SrpcMessageHeader)
}

void SrpcMessageHeader::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&nature_) -
    reinterpret_cast<char*>(&type_) + sizeof(nature_));
  _cached_size_ = 0;
}

SrpcMessageHeader::~SrpcMessageHeader() {
  // @@protoc_insertion_point(destructor:srpc.types.SrpcMessageHeader)
  SharedDtor();
}

void SrpcMessageHeader::SharedDtor() {
}

void SrpcMessageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrpcMessageHeader::descriptor() {
  protobuf_srpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_srpc_2eproto::file_level_metadata[0].descriptor;
}

const SrpcMessageHeader& SrpcMessageHeader::default_instance() {
  protobuf_srpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SrpcMessageHeader* SrpcMessageHeader::New(::google::protobuf::Arena* arena) const {
  SrpcMessageHeader* n = new SrpcMessageHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrpcMessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:srpc.types.SrpcMessageHeader)
  ::memset(&type_, 0, reinterpret_cast<char*>(&nature_) -
    reinterpret_cast<char*>(&type_) + sizeof(nature_));
}

bool SrpcMessageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:srpc.types.SrpcMessageHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .srpc.types.SrpcMessageHeader.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::srpc::types::SrpcMessageHeader_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .srpc.types.SrpcMessageHeader.MessageNature nature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nature(static_cast< ::srpc::types::SrpcMessageHeader_MessageNature >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:srpc.types.SrpcMessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:srpc.types.SrpcMessageHeader)
  return false;
#undef DO_
}

void SrpcMessageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:srpc.types.SrpcMessageHeader)
  // .srpc.types.SrpcMessageHeader.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 mid = 2;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mid(), output);
  }

  // int32 rid = 3;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rid(), output);
  }

  // .srpc.types.SrpcMessageHeader.MessageNature nature = 4;
  if (this->nature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->nature(), output);
  }

  // @@protoc_insertion_point(serialize_end:srpc.types.SrpcMessageHeader)
}

::google::protobuf::uint8* SrpcMessageHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:srpc.types.SrpcMessageHeader)
  // .srpc.types.SrpcMessageHeader.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 mid = 2;
  if (this->mid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mid(), target);
  }

  // int32 rid = 3;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rid(), target);
  }

  // .srpc.types.SrpcMessageHeader.MessageNature nature = 4;
  if (this->nature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->nature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:srpc.types.SrpcMessageHeader)
  return target;
}

size_t SrpcMessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srpc.types.SrpcMessageHeader)
  size_t total_size = 0;

  // .srpc.types.SrpcMessageHeader.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 mid = 2;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  // int32 rid = 3;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // .srpc.types.SrpcMessageHeader.MessageNature nature = 4;
  if (this->nature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrpcMessageHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srpc.types.SrpcMessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SrpcMessageHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SrpcMessageHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srpc.types.SrpcMessageHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srpc.types.SrpcMessageHeader)
    MergeFrom(*source);
  }
}

void SrpcMessageHeader::MergeFrom(const SrpcMessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srpc.types.SrpcMessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.nature() != 0) {
    set_nature(from.nature());
  }
}

void SrpcMessageHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srpc.types.SrpcMessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrpcMessageHeader::CopyFrom(const SrpcMessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srpc.types.SrpcMessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpcMessageHeader::IsInitialized() const {
  return true;
}

void SrpcMessageHeader::Swap(SrpcMessageHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrpcMessageHeader::InternalSwap(SrpcMessageHeader* other) {
  std::swap(type_, other->type_);
  std::swap(mid_, other->mid_);
  std::swap(rid_, other->rid_);
  std::swap(nature_, other->nature_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SrpcMessageHeader::GetMetadata() const {
  protobuf_srpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_srpc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrpcMessageHeader

// .srpc.types.SrpcMessageHeader.MessageType type = 1;
void SrpcMessageHeader::clear_type() {
  type_ = 0;
}
::srpc::types::SrpcMessageHeader_MessageType SrpcMessageHeader::type() const {
  // @@protoc_insertion_point(field_get:srpc.types.SrpcMessageHeader.type)
  return static_cast< ::srpc::types::SrpcMessageHeader_MessageType >(type_);
}
void SrpcMessageHeader::set_type(::srpc::types::SrpcMessageHeader_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:srpc.types.SrpcMessageHeader.type)
}

// int32 mid = 2;
void SrpcMessageHeader::clear_mid() {
  mid_ = 0;
}
::google::protobuf::int32 SrpcMessageHeader::mid() const {
  // @@protoc_insertion_point(field_get:srpc.types.SrpcMessageHeader.mid)
  return mid_;
}
void SrpcMessageHeader::set_mid(::google::protobuf::int32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:srpc.types.SrpcMessageHeader.mid)
}

// int32 rid = 3;
void SrpcMessageHeader::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 SrpcMessageHeader::rid() const {
  // @@protoc_insertion_point(field_get:srpc.types.SrpcMessageHeader.rid)
  return rid_;
}
void SrpcMessageHeader::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:srpc.types.SrpcMessageHeader.rid)
}

// .srpc.types.SrpcMessageHeader.MessageNature nature = 4;
void SrpcMessageHeader::clear_nature() {
  nature_ = 0;
}
::srpc::types::SrpcMessageHeader_MessageNature SrpcMessageHeader::nature() const {
  // @@protoc_insertion_point(field_get:srpc.types.SrpcMessageHeader.nature)
  return static_cast< ::srpc::types::SrpcMessageHeader_MessageNature >(nature_);
}
void SrpcMessageHeader::set_nature(::srpc::types::SrpcMessageHeader_MessageNature value) {
  
  nature_ = value;
  // @@protoc_insertion_point(field_set:srpc.types.SrpcMessageHeader.nature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace srpc

// @@protoc_insertion_point(global_scope)
