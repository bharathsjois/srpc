// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dts.proto

#ifndef PROTOBUF_dts_2eproto__INCLUDED
#define PROTOBUF_dts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace dts {
namespace types {
class DtsMessageHeader;
class DtsMessageHeaderDefaultTypeInternal;
extern DtsMessageHeaderDefaultTypeInternal _DtsMessageHeader_default_instance_;
class DtsString;
class DtsStringDefaultTypeInternal;
extern DtsStringDefaultTypeInternal _DtsString_default_instance_;
class DtsStringList;
class DtsStringListDefaultTypeInternal;
extern DtsStringListDefaultTypeInternal _DtsStringList_default_instance_;
}  // namespace types
}  // namespace dts

namespace dts {
namespace types {

namespace protobuf_dts_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dts_2eproto

enum DtsMessageHeader_MessageType {
  DtsMessageHeader_MessageType_UNKNOWN = 0,
  DtsMessageHeader_MessageType_METHOD = 1,
  DtsMessageHeader_MessageType_RESULT = 2,
  DtsMessageHeader_MessageType_SIGNAL = 3,
  DtsMessageHeader_MessageType_DtsMessageHeader_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DtsMessageHeader_MessageType_DtsMessageHeader_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DtsMessageHeader_MessageType_IsValid(int value);
const DtsMessageHeader_MessageType DtsMessageHeader_MessageType_MessageType_MIN = DtsMessageHeader_MessageType_UNKNOWN;
const DtsMessageHeader_MessageType DtsMessageHeader_MessageType_MessageType_MAX = DtsMessageHeader_MessageType_SIGNAL;
const int DtsMessageHeader_MessageType_MessageType_ARRAYSIZE = DtsMessageHeader_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DtsMessageHeader_MessageType_descriptor();
inline const ::std::string& DtsMessageHeader_MessageType_Name(DtsMessageHeader_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DtsMessageHeader_MessageType_descriptor(), value);
}
inline bool DtsMessageHeader_MessageType_Parse(
    const ::std::string& name, DtsMessageHeader_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DtsMessageHeader_MessageType>(
    DtsMessageHeader_MessageType_descriptor(), name, value);
}
enum DtsMessageHeader_MessageNature {
  DtsMessageHeader_MessageNature_DEFAULT = 0,
  DtsMessageHeader_MessageNature_SYNC = 1,
  DtsMessageHeader_MessageNature_ASYNC = 2,
  DtsMessageHeader_MessageNature_DtsMessageHeader_MessageNature_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DtsMessageHeader_MessageNature_DtsMessageHeader_MessageNature_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DtsMessageHeader_MessageNature_IsValid(int value);
const DtsMessageHeader_MessageNature DtsMessageHeader_MessageNature_MessageNature_MIN = DtsMessageHeader_MessageNature_DEFAULT;
const DtsMessageHeader_MessageNature DtsMessageHeader_MessageNature_MessageNature_MAX = DtsMessageHeader_MessageNature_ASYNC;
const int DtsMessageHeader_MessageNature_MessageNature_ARRAYSIZE = DtsMessageHeader_MessageNature_MessageNature_MAX + 1;

const ::google::protobuf::EnumDescriptor* DtsMessageHeader_MessageNature_descriptor();
inline const ::std::string& DtsMessageHeader_MessageNature_Name(DtsMessageHeader_MessageNature value) {
  return ::google::protobuf::internal::NameOfEnum(
    DtsMessageHeader_MessageNature_descriptor(), value);
}
inline bool DtsMessageHeader_MessageNature_Parse(
    const ::std::string& name, DtsMessageHeader_MessageNature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DtsMessageHeader_MessageNature>(
    DtsMessageHeader_MessageNature_descriptor(), name, value);
}
// ===================================================================

class DtsMessageHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dts.types.DtsMessageHeader) */ {
 public:
  DtsMessageHeader();
  virtual ~DtsMessageHeader();

  DtsMessageHeader(const DtsMessageHeader& from);

  inline DtsMessageHeader& operator=(const DtsMessageHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DtsMessageHeader& default_instance();

  static inline const DtsMessageHeader* internal_default_instance() {
    return reinterpret_cast<const DtsMessageHeader*>(
               &_DtsMessageHeader_default_instance_);
  }

  void Swap(DtsMessageHeader* other);

  // implements Message ----------------------------------------------

  inline DtsMessageHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  DtsMessageHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DtsMessageHeader& from);
  void MergeFrom(const DtsMessageHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DtsMessageHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DtsMessageHeader_MessageType MessageType;
  static const MessageType UNKNOWN =
    DtsMessageHeader_MessageType_UNKNOWN;
  static const MessageType METHOD =
    DtsMessageHeader_MessageType_METHOD;
  static const MessageType RESULT =
    DtsMessageHeader_MessageType_RESULT;
  static const MessageType SIGNAL =
    DtsMessageHeader_MessageType_SIGNAL;
  static inline bool MessageType_IsValid(int value) {
    return DtsMessageHeader_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    DtsMessageHeader_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    DtsMessageHeader_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    DtsMessageHeader_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return DtsMessageHeader_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return DtsMessageHeader_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return DtsMessageHeader_MessageType_Parse(name, value);
  }

  typedef DtsMessageHeader_MessageNature MessageNature;
  static const MessageNature DEFAULT =
    DtsMessageHeader_MessageNature_DEFAULT;
  static const MessageNature SYNC =
    DtsMessageHeader_MessageNature_SYNC;
  static const MessageNature ASYNC =
    DtsMessageHeader_MessageNature_ASYNC;
  static inline bool MessageNature_IsValid(int value) {
    return DtsMessageHeader_MessageNature_IsValid(value);
  }
  static const MessageNature MessageNature_MIN =
    DtsMessageHeader_MessageNature_MessageNature_MIN;
  static const MessageNature MessageNature_MAX =
    DtsMessageHeader_MessageNature_MessageNature_MAX;
  static const int MessageNature_ARRAYSIZE =
    DtsMessageHeader_MessageNature_MessageNature_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageNature_descriptor() {
    return DtsMessageHeader_MessageNature_descriptor();
  }
  static inline const ::std::string& MessageNature_Name(MessageNature value) {
    return DtsMessageHeader_MessageNature_Name(value);
  }
  static inline bool MessageNature_Parse(const ::std::string& name,
      MessageNature* value) {
    return DtsMessageHeader_MessageNature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .dts.types.DtsMessageHeader.MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::dts::types::DtsMessageHeader_MessageType type() const;
  void set_type(::dts::types::DtsMessageHeader_MessageType value);

  // int32 mid = 2;
  void clear_mid();
  static const int kMidFieldNumber = 2;
  ::google::protobuf::int32 mid() const;
  void set_mid(::google::protobuf::int32 value);

  // int32 rid = 3;
  void clear_rid();
  static const int kRidFieldNumber = 3;
  ::google::protobuf::int32 rid() const;
  void set_rid(::google::protobuf::int32 value);

  // .dts.types.DtsMessageHeader.MessageNature nature = 4;
  void clear_nature();
  static const int kNatureFieldNumber = 4;
  ::dts::types::DtsMessageHeader_MessageNature nature() const;
  void set_nature(::dts::types::DtsMessageHeader_MessageNature value);

  // @@protoc_insertion_point(class_scope:dts.types.DtsMessageHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::int32 mid_;
  ::google::protobuf::int32 rid_;
  int nature_;
  mutable int _cached_size_;
  friend struct protobuf_dts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DtsString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dts.types.DtsString) */ {
 public:
  DtsString();
  virtual ~DtsString();

  DtsString(const DtsString& from);

  inline DtsString& operator=(const DtsString& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DtsString& default_instance();

  static inline const DtsString* internal_default_instance() {
    return reinterpret_cast<const DtsString*>(
               &_DtsString_default_instance_);
  }

  void Swap(DtsString* other);

  // implements Message ----------------------------------------------

  inline DtsString* New() const PROTOBUF_FINAL { return New(NULL); }

  DtsString* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DtsString& from);
  void MergeFrom(const DtsString& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DtsString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string string = 1;
  void clear_string();
  static const int kStringFieldNumber = 1;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  #if LANG_CXX11
  void set_string(::std::string&& value);
  #endif
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // @@protoc_insertion_point(class_scope:dts.types.DtsString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr string_;
  mutable int _cached_size_;
  friend struct protobuf_dts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DtsStringList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dts.types.DtsStringList) */ {
 public:
  DtsStringList();
  virtual ~DtsStringList();

  DtsStringList(const DtsStringList& from);

  inline DtsStringList& operator=(const DtsStringList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DtsStringList& default_instance();

  static inline const DtsStringList* internal_default_instance() {
    return reinterpret_cast<const DtsStringList*>(
               &_DtsStringList_default_instance_);
  }

  void Swap(DtsStringList* other);

  // implements Message ----------------------------------------------

  inline DtsStringList* New() const PROTOBUF_FINAL { return New(NULL); }

  DtsStringList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DtsStringList& from);
  void MergeFrom(const DtsStringList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DtsStringList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string string = 1;
  int string_size() const;
  void clear_string();
  static const int kStringFieldNumber = 1;
  const ::std::string& string(int index) const;
  ::std::string* mutable_string(int index);
  void set_string(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_string(int index, ::std::string&& value);
  #endif
  void set_string(int index, const char* value);
  void set_string(int index, const char* value, size_t size);
  ::std::string* add_string();
  void add_string(const ::std::string& value);
  #if LANG_CXX11
  void add_string(::std::string&& value);
  #endif
  void add_string(const char* value);
  void add_string(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string();

  // @@protoc_insertion_point(class_scope:dts.types.DtsStringList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_;
  mutable int _cached_size_;
  friend struct protobuf_dts_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DtsMessageHeader

// .dts.types.DtsMessageHeader.MessageType type = 1;
inline void DtsMessageHeader::clear_type() {
  type_ = 0;
}
inline ::dts::types::DtsMessageHeader_MessageType DtsMessageHeader::type() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsMessageHeader.type)
  return static_cast< ::dts::types::DtsMessageHeader_MessageType >(type_);
}
inline void DtsMessageHeader::set_type(::dts::types::DtsMessageHeader_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dts.types.DtsMessageHeader.type)
}

// int32 mid = 2;
inline void DtsMessageHeader::clear_mid() {
  mid_ = 0;
}
inline ::google::protobuf::int32 DtsMessageHeader::mid() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsMessageHeader.mid)
  return mid_;
}
inline void DtsMessageHeader::set_mid(::google::protobuf::int32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:dts.types.DtsMessageHeader.mid)
}

// int32 rid = 3;
inline void DtsMessageHeader::clear_rid() {
  rid_ = 0;
}
inline ::google::protobuf::int32 DtsMessageHeader::rid() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsMessageHeader.rid)
  return rid_;
}
inline void DtsMessageHeader::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:dts.types.DtsMessageHeader.rid)
}

// .dts.types.DtsMessageHeader.MessageNature nature = 4;
inline void DtsMessageHeader::clear_nature() {
  nature_ = 0;
}
inline ::dts::types::DtsMessageHeader_MessageNature DtsMessageHeader::nature() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsMessageHeader.nature)
  return static_cast< ::dts::types::DtsMessageHeader_MessageNature >(nature_);
}
inline void DtsMessageHeader::set_nature(::dts::types::DtsMessageHeader_MessageNature value) {
  
  nature_ = value;
  // @@protoc_insertion_point(field_set:dts.types.DtsMessageHeader.nature)
}

// -------------------------------------------------------------------

// DtsString

// string string = 1;
inline void DtsString::clear_string() {
  string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DtsString::string() const {
  // @@protoc_insertion_point(field_get:dts.types.DtsString.string)
  return string_.GetNoArena();
}
inline void DtsString::set_string(const ::std::string& value) {
  
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dts.types.DtsString.string)
}
#if LANG_CXX11
inline void DtsString::set_string(::std::string&& value) {
  
  string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dts.types.DtsString.string)
}
#endif
inline void DtsString::set_string(const char* value) {
  
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dts.types.DtsString.string)
}
inline void DtsString::set_string(const char* value, size_t size) {
  
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dts.types.DtsString.string)
}
inline ::std::string* DtsString::mutable_string() {
  
  // @@protoc_insertion_point(field_mutable:dts.types.DtsString.string)
  return string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DtsString::release_string() {
  // @@protoc_insertion_point(field_release:dts.types.DtsString.string)
  
  return string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DtsString::set_allocated_string(::std::string* string) {
  if (string != NULL) {
    
  } else {
    
  }
  string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  // @@protoc_insertion_point(field_set_allocated:dts.types.DtsString.string)
}

// -------------------------------------------------------------------

// DtsStringList

// repeated string string = 1;
inline int DtsStringList::string_size() const {
  return string_.size();
}
inline void DtsStringList::clear_string() {
  string_.Clear();
}
inline const ::std::string& DtsStringList::string(int index) const {
  // @@protoc_insertion_point(field_get:dts.types.DtsStringList.string)
  return string_.Get(index);
}
inline ::std::string* DtsStringList::mutable_string(int index) {
  // @@protoc_insertion_point(field_mutable:dts.types.DtsStringList.string)
  return string_.Mutable(index);
}
inline void DtsStringList::set_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dts.types.DtsStringList.string)
  string_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DtsStringList::set_string(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dts.types.DtsStringList.string)
  string_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DtsStringList::set_string(int index, const char* value) {
  string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dts.types.DtsStringList.string)
}
inline void DtsStringList::set_string(int index, const char* value, size_t size) {
  string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dts.types.DtsStringList.string)
}
inline ::std::string* DtsStringList::add_string() {
  // @@protoc_insertion_point(field_add_mutable:dts.types.DtsStringList.string)
  return string_.Add();
}
inline void DtsStringList::add_string(const ::std::string& value) {
  string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dts.types.DtsStringList.string)
}
#if LANG_CXX11
inline void DtsStringList::add_string(::std::string&& value) {
  string_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:dts.types.DtsStringList.string)
}
#endif
inline void DtsStringList::add_string(const char* value) {
  string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dts.types.DtsStringList.string)
}
inline void DtsStringList::add_string(const char* value, size_t size) {
  string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dts.types.DtsStringList.string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DtsStringList::string() const {
  // @@protoc_insertion_point(field_list:dts.types.DtsStringList.string)
  return string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DtsStringList::mutable_string() {
  // @@protoc_insertion_point(field_mutable_list:dts.types.DtsStringList.string)
  return &string_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace types
}  // namespace dts

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dts::types::DtsMessageHeader_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dts::types::DtsMessageHeader_MessageType>() {
  return ::dts::types::DtsMessageHeader_MessageType_descriptor();
}
template <> struct is_proto_enum< ::dts::types::DtsMessageHeader_MessageNature> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dts::types::DtsMessageHeader_MessageNature>() {
  return ::dts::types::DtsMessageHeader_MessageNature_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dts_2eproto__INCLUDED
